# THREE GOLD STARS
# Question 3-star: Elementary Cellular Automaton

# Please see the video for additional explanation.

# A one-dimensional cellular automata takes in a string, which in our
# case, consists of the characters '.' and 'x', and changes it according
# to some predetermined rules. The rules consider three characters, which
# are a character at position k and its two neighbours, and determine
# what the character at the corresponding position k will be in the new
# string.

# For example, if the character at position k in the string  is '.' and
# its neighbours are '.' and 'x', then the pattern is '..x'. We look up
# '..x' in the table below. In the table, '..x' corresponds to 'x' which
# means that in the new string, 'x' will be at position k.

# contribution to pattern number is 0 if replaced by '.' and value if replaced by 'x'

# Rules:
#          pattern in         position k in        contribution to
# Value    current string     new string           pattern number
#                                                  is 0 if replaced by '.'
#                                                  and value if replaced
#                                                  by 'x'
#   1       '...'               '.'                        1 * 0
#   2       '..x'               'x'                        2 * 1
#   4       '.x.'               'x'                        4 * 1
#   8       '.xx'               'x'                        8 * 1
#  16       'x..'               '.'                       16 * 0
#  32       'x.x'               '.'                       32 * 0
#  64       'xx.'               '.'                       64 * 0
# 128       'xxx'               'x'                      128 * 1
#                                                      ----------
#                                                           142

# To calculate the patterns which will have the central character x, work
# out the values required to sum to the pattern number. For example,
# 32 = 32 so only pattern 32 which is x.x changes the central position to
# an x. All the others have a . in the next line.

# 23 = 16 + 4 + 2 + 1 which means that 'x..', '.x.', '..x' and '...' all
# lead to an 'x' in the next line and the rest have a '.'

# For pattern 142, and starting string
# ...........x...........
# the new strings created will be
# ..........xx...........  (generations = 1)
# .........xx............  (generations = 2)
# ........xx.............  (generations = 3)
# .......xx..............  (generations = 4)
# ......xx...............  (generations = 5)
# .....xx................  (generations = 6)
# ....xx.................  (generations = 7)
# ...xx..................  (generations = 8)
# ..xx...................  (generations = 9)
# .xx....................  (generations = 10)

# Note that the first position of the string is next to the last position
# in the string.

# Define a procedure, cellular_automaton, that takes three inputs:
#     a non-empty string,
#     a pattern number which is an integer between 0 and 255 that
# represents a set of rules, and
#     a positive integer, n, which is the number of generations.
# The procedure should return a string which is the result of
# applying the rules generated by the pattern to the string n times.

def define_rules(pattern):
  # Hash table of the rules
  rules = {
    '...': [1,   '.'],  #   1 * 0
    '..x': [2,   '.'],  #   2 * 1
    '.x.': [4,   '.'],  #   4 * 1
    '.xx': [8,   '.'],  #   8 * 1
    'x..': [16,  '.'],  #  16 * 0
    'x.x': [32,  '.'],  #  32 * 0
    'xx.': [64,  '.'],  #  64 * 0
    'xxx': [128, '.']   # 128 * 1
  }

  if pattern == 0:
    return rules

  # Define the rules for this pattern
  rule_max = 128
  new_rules = []
  while pattern and rule_max > 0:
    if rule_max <= pattern:
      pattern -= rule_max
      new_rules.append(rule_max)
    rule_max /= 2

  for rule in rules:
    if rules[rule][0] in new_rules:
      rules[rule][1] = 'x'
      continue
    else:
      rules[rule][1] = '.'

  return rules

def cellular_automaton(string, pattern, generations):
  if generations < 1:
    return None
  if string == '':
    return None

  new_string = ''
  rules = define_rules(pattern)
  for i in range(0, generations):
    for k in range(0, len(string)):
      if k == len(string) - 1:
        token = string[k - 1] + string[k] + string[0]
      else:
        token = string[k - 1] + string[k] + string[k + 1]
      if token in rules:
        new_string += rules[token][1]
      else:
        print 'Err: token not in rules: ', token
    string = new_string
    if i < (generations - 1):
      new_string = ''
  return new_string

# r = define_rules(142)
# print r

print cellular_automaton('...x....', 0, 1)
#>>> ........
print cellular_automaton('.x.x.x.x.', 249, 3)
#>>> .x..x.x.x
# print "xx.xxxxx ==>", cellular_automaton('...x....', 125, 1)
#>>> xx.xxxxx
# print ".xxx.... ==>", cellular_automaton('...x....', 125, 2)
#>>> .xxx....
# print ".x.xxxxx ==>", cellular_automaton('...x....', 125, 3)
#>>> .x.xxxxx
# print "xxxx...x ==>", cellular_automaton('...x....', 125, 4)
#>>> xxxx...x
# print "...xxx.x ==>", cellular_automaton('...x....', 125, 5)
#>>> ...xxx.x
# print "xx.x.xxx ==>", cellular_automaton('...x....', 125, 6)
#>>> xx.x.xxx
# print ".xxxxx.. ==>", cellular_automaton('...x....', 125, 7)
#>>> .xxxxx..
#print ".x...xxx ==>", cellular_automaton('...x....', 125, 8)
#>>> .x...xxx
#print "xxxx.x.x ==>", cellular_automaton('...x....', 125, 9)
#>>> xxxx.x.x
#print "...xxxxx ==>", cellular_automaton('...x....', 125, 10)
#>>> ...xxxxx

